礼乎后台接口文档

一、用户模块
	1.1获取登录页面
		请求方式:	GET
		请求url:	/user/login

		请求参数:	无

		返回参数 :	视图  login/login

	1.2登录
		请求方式:	POST
		请求url:	/user/login

		请求参数:	
				email 				邮箱
				password			密码 

		返回参数 :
				{
					errCode:xxx,		
								0. 表示返回正常
								1. 邮箱格式不正确！
								2. 请输入密码
								3. 密码错误
								4. 密码或邮箱错误

					message:xxx		提示信息
					intendedUrl:xxx	登录之前页面所在的url(登录成功时有此参数)
					"user":{
							"id"				  : "用户id"	
							"email"           	  : "邮箱",
            				"username"            : "用户名",
				            "avatar"              : "头像(喜欢用户)",
				            "gender"              : "性别",
				            "phone"               : "电话",
				            "birthday"            : "生日",
				            "postion"             : "职业" 
					}
				}
	1.3 登出
		请求方式:	POST
		请求url:	/user/logout

		请求参数:	无

		返回参数 :
				{
					errCode:xxx,		
								0. 表示返回正常
								1. 用户未登录！

					message:xxx		提示信息
				}


	2.1注册——获取注册页面
		请求方式:	GET
		请求url:	/user/register

		请求参数:	无

		返回参数 :	视图 register/register


	2.2注册——发送验证码
		请求方式: 	POST
		请求url:	/user/register_code

		请求参数:	
				email 				邮箱

		返回参数:
				{
					errCode:xxx,		0.表示返回正常
								1.请填写邮箱！
								2.邮箱格式不正确！
								3.此邮箱已注册！

					message:xxx		提示信息
				}

	2.3注册——验证验证码
		请求方式:	POST
		请求url:	/user/check_code

		请求参数:	
				email 				邮箱
				check_code 			验证码

		返回参数:
				{
					errCode:xxx,		0.表示返回正常
								1.邮箱不正确！
								2.验证码不正确！

					message:xxx		提示信息
				}


	2.4注册——获取设置密码静态页
		请求方式:	POST
		请求url:	/user/set_pwd

		请求参数:	无

		返回参数:
				视图register/setPwd

	2.5注册
		请求方式:	POST
		请求url:	/user/register

		请求参数:	
				username			用户名
				password 			密码

		返回参数 :
				{
					errCode:xxx,		0. 表示返回正常
								1. 请填写完整的信息！
								2. 此用户名已注册！
								3. 密码只能包含字母和数字！
								4. 密码长度必须在6到20之间！
								5. 两次输入的密码不一致！

					message:xxx		提示信息
				}

	3.1忘记密码——获取重置静态页面
		请求方式:	GET
		请求url:	/user/pwd

		请求参数:	无


		返回参数 :	View视图  login/resetPsd

	3.2忘记密码——获取验证码
		请求方式:	POST
		请求url:	/user/pwd_code

		请求参数:	
				email				邮箱


		返回参数 :	
				{
					errCode:xxx,		0. 表示返回正常
								1. 邮箱格式不正确！
								2. 该邮箱未注册！

					message:xxx		提示信息
				}

	3.3忘记密码——重置密码
		请求方式: 	POST
		请求url:	/user/pwd

		请求参数：	
				email				邮箱
				check_code			验证码
				password 			密码

		返回参数：
				{
					errCode:xxx,		0. 表示返回正常
								1. 邮箱不正确！
								2. 验证码不正确！
								3. 密码长度为6到20之间！
								4. 两次输入的密码不一致！
								5. 密码修改失败！
								6.密码无效！
								7.用户不存在！

					message:xxx		提示信息
				}

 
二、首页模块
	1.礼品展示
		请求方式:	GET
		请求url:	/

		请求参数:	无

		返回参数 :	
				视图View index/home
				posters:[
					{
					photo_url		海报图片（新品推荐）
					info_url			详情页链接id
					 }....		
				]
				topics:[
					{
					id 				专题id
					topic_url		专题图片
					}
				]
				"recommendations":[
					{
					photo_url,		每日一荐图片
					info_url，		详情页id
					content， 		内容
					scan_num，		浏览人数
					focus_num，		收藏人数					
					}
				]
				
		备注:请将每一个实例的id存在页面中,用于导向商品详情页
	
##	2.商品详情
		请求方式:	GET
		请求url:	/home/gift_detail

		请求参数:
				gift_id 				礼品id
		
		返回参数 :
				视图 index/goodsDetails
				gift_posters:[
										图片链接(轮播图)
					]
				gift:{
					title，					礼品名称
					price，					价格
					gift_info,				礼物说明文字
					focus_num,				收藏条数
					taobao_url，				淘宝url
					
				}
				gift_photo_intros:[
						 					图文介绍图片
				] 			
				focus_users:[
					{
					id， 					用户id
					email 					邮箱
					username 				用户名
					avatar 					头像(喜欢用户)
					gender					性别
					phone					电话
					birthday				生日
					postion 				职业
					}...
				]
				gifts_like:[
					{
					id 						礼品id
					url 					相似推荐图片
					}...
				] 					


	3.收藏
		请求方式:	POST
		请求url:	/home/collection

		请求参数:
				gift_id 				礼品id

		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	4. 专题
		请求方式:	GET
		请求url:	/home/topic

		请求参数:
				topic_id 			专题id

		返回参数:
				视图 index/goodsDetails
				topic:{
					title,			专题标题
					content,		专题内容
					topic_url,		专题图片
					scan_num,	 	浏览人数
					focus_num 		关注人数
				}
				gifts:[
					{
					id 			礼品id
					title,			礼品名称
					price,			价格
					content,		礼品描述
					gift_photo_info,	图片
					scan_num,		浏览人数
					focus_num 		收藏人数
					}
				]


	注意 : 评论和回复接口暂时不用，第一版不做！
	5.评论
		请求方式:	POST
		请求url:	/home/gift/comment

		请求参数:	
				gift_id 				礼品id

		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	6.评论——回复
		请求方式:	POST
		请求url:	/home/gift/reply

		请求参数:
				gift_id 				礼品id
				comment_id			评论id
				reply_id			回复id（当为评论第一条回复时,此处为空）

		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

三、选礼模块
	1.选礼静态页
		请求方式:	GET
		请求url:	/election

		请求参数:	无

		返回参数 :	静态页面 gifts/seachGifts

##	2.1 根据用户输入的关键字检索显示
		请求方式:	POST
		请求url:	/election/selection

		请求参数:	
				word 				用户输入关键字

		返回参数 :	
				{
					errCode, 			错误代码（0表示返回正常）
					message，			提示信息
					gifts:[
						{
						id 					礼物id
						img,			图片链接
						title,			礼物名称
						price,			价	格
						}...
					]
					
				}
	2.2 返回礼物类别分类
		请求方式： GET
		请求url： ／election／class

		请求参数： 无

		返回参数：
				label：｛
						char:{
							char_id, 	排顺序用字段
							class		类别
						},
						scene:{
							scene_id,	排顺序用字段
							class		类别
						},
						object:{
							object_id, 	排顺序用字段
							class		类别
						}
						price:{
							price_id,	排顺序用字段
							low_price,	价格范围的低价
							high_price	价格范围的高价
						}
						]
					｝
	3.选礼
		请求方式：POST
		请求url：/election/selection_by_label

		请求参数：
				'char'			:'char'
				'scene'			:'scene'
				'object'		:'object'
				'price'			:'price'

		返回参数：
				{
					errCode, 			错误代码（0表示返回正常）
					message，			提示信息
					gifts:[
						{
						id 					礼物id
						img,			图片链接
						title,			礼物名称
						price,			价	格
						}...
					]
					
				}

四、圈子模块
	1 圈子静态页——热门话题
		请求方式:	GET
		请求url:	/article

		请求参数:	
				per_page			每页数
				page    			第几页

		返回参数 :	视图 topics/hotTopics
				{
					errCode, 			错误代码（0表示返回正常）
					message，			提示信息	
					articles:[
						{
						id,			话题id
						title,			话题标题
						url,			话题的图片
						text			话题内容
						}...
					]
				}
	2 圈子静态页——官方话题
		请求方式:	GET
		请求url:	/article/offical

		请求参数:	无

		返回参数 :	视图 topics/officialTopics
				{
					errCode, 			错误代码（0表示返回正常）
					message，			提示信息
					articles:[
						{
						id, 			话题id
						picture,		话题图片
						title,			题目
						content		内容
						}...
					]
				}
	3 圈子静态页—话题内容展开
		请求方式:	GET
		请求url:	/article/detail

		请求参数:	
				article_id			话题id
				per_page			每页数
				page    			第几页

		返回参数 :	视图 topics/topics
				{
					errCode, 			错误代码（0表示返回正常）
					message，			提示信息
					total               总页数

					article:{
						title,			话题标题
						scan_num,		浏览人数
						join_num,		参与话题人数	
						focus_num,		收藏人数
					}
					article_parts:[
						{
							content,	话题内容	
							type,		类型（text为文本，url为图片）
						}...
					]
					备注:article_parts是文章的内容，分类型呈现数据，各部分已按顺序传给前台
					article_joins:[
						{
							id，		参与话题的id
							username,	昵称
							avaatar,	头像
							content，	内容
						}...
					]
					备注:article_joins，前端需要去判断此字段后台是否有传过来
				}


			<----------------备注:前端需自己去判断参数是否有值------------------>
	4 圈子静态页—参与话题详情
		请求方式:	GET
		请求url:	/article/join_detail

		请求参数:
				join_id 					参与话题id

		返回参数 :	
				视图 topics/topicDetails
				{
					errCode:xxx,			错误码	0表示返回正常	 
					message:xxx				提示信息
					article_join:{
						scan_num,			浏览人数
						com_num,			评论条数
						focus_num			收藏人数
					}
					article_join_parts:[
					   {
					   	content,			内容
					   	type, 				类型
					   }....
					]
					备注:article_join_parts是文章的内容
					join_coms:[
						{
						username,			评论者姓名
						avatar,			评论者头像
						content,			评论内容
						replys:[
							{
							reply_name,		回复者姓名
							content, 		内容
							}...
						   ]
						}...
					]
				}


	5.1 评论参与话题 
		请求方式:	POST
		请求url:	/article/comment

		请求参数:	
				join_id					参与话题id
				content 				话题内容
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}
	
	5.2 删除评论参与话题
		请求方式:	POST
		请求url:	/article/dcomment

		请求参数:	
				com_id				评论id
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	6.1 回复参与话题的评论
		请求方式:	POST
		请求url:	/article/reply

		请求参数:	
				com_id， 			评论的id
				content， 			内容
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	6.2 删除回复
		请求方式:	POST
		请求url:	/article/dreply

		请求参数:	
				reply_id，			回复的id
				
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	7.发表参与话题
		请求方式:	POST
		请求url:	/article/issue

				<----------内容已用户发表的顺序传给后台------------------>
				<----------图片的type为url，文字的type为text-------------->
		请求参数:	
				article_id			话题的id
				content:[			参与话题的内容
					{
					type=>content
					}....
				] 				
				
				
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}
	8. 编辑参与话题
		请求方式:	POST
		请求url:	/article/edit

				<----------内容已用户发表的顺序传给后台------------------>
				<----------图片的type为url，文字的type为text-------------->
		请求参数:	
				join_id				参与话题的id
				content:[			参与话题的内容
					{
					type=>content
					}....
				] 				
				
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	9.删除参与话题话题
		请求方式:	POST
		请求url:	/article/darticle

		请求参数:	
				join_id				参与话题的id
				
		返回参数 :

				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}
六.我的
	1.我参与的话题
		请求方式:	GET
		请求url:	/mime/join_article

		请求参数:	无
				<---------------前端需要去判断是否有articles----------------->
		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
					article:[		话题数组
						{
						title,		话题标题
						url,		话题图片链接
						content， 	话题第一端内容
						}...
					]
					user:{
						username,	用户名
						avatar,	头像
					}
				}

	2.我喜欢的礼品
		请求方式:	GET
		请求url:	/mime/like_gift

		请求参数:	无
				
		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
					gifts:[
						{
						title,		礼品名
						price,		礼品价格
						url,		礼品图片链接
						}......
					]
					user:{
						username,	用户名
						avatar,	头像
					}
				}
		

五、设置模块
	1.1个人信息
		请求方式:	POST
		请求url:	/site/per_info

		请求参数:
		备注:		
				type: 				0=没有登录，1=登录
				user_id				用户id
				avatar				头像	
				username			昵称
				gender				性别
				birthday			生日
				postion				职业
				}
		返回参数 :
				{
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				}
	1.2 个人信息
		请求方式:	GET
		请求url:	/site/per_info

		请求参数:

		返回参数 : 视图 /setting/userInfo
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
					user:{
					avatar:        		头像
					username:     	昵称
					gender         		性别
					birthday       		生日
					postion		职业
					}
				}


	2.消息推送
		请求方式:	POST
		请求url:	/set_up

		请求参数:	
				set_id				设置的选择

		返回参数 :
				{
					errCode:xxx,		错误码	0表示返回正常	 
					message:xxx		提示信息
				}


	5.意见反馈
		请求方式:	POST
		请求url:	/feedback

		请求参数:
				content 			内容

		返回参数 :
				{
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				}

	6.点评礼乎
		链接到	Appstore

六.通知模块
	1.静态页面
		请求方式:	GET
		请求url:	/notice

		请求参数:	无

		返回参数 :	视图 setting/news
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
					user_count,		回复条数
					offical_count	官方通知条数

				｝

	2.通知的简讯(用户类)
		请求方式:	GET
		请求url:	/notice/bref_user

		请求参数:	无

		返回参数 :	视图(话题) setting/news/topicReplies
			{
				errCode:xxx,			错误码	0表示返回正常	 
				message:xxx				提示信息
				"replys":[
					{
					id 					回复id
					avatar,				头像
					username,			名字
					created_at，			时间
					}...
				]
				"comments":[
					｛
					id 					评论id
					avatar,				头像
					username,			名字
					created_at，			时间
					}...
				]
			}

	3.回复详情页
		与“4 圈子静态页—参与话题详情”一样，见文档498行处

	4.删除全部回复通知
		请求方式：post
		请求url：/notice/d_user

		请求参数： 无

		返回参数：
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				｝

	5.删除通知中的一条评论
		请求方式：post
		请求url：/notice/d_user_com

		请求参数：  com_id 			评论id

		返回参数：
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				｝

	6.删除通知中的一条回复
		请求方式：post
		请求url：/notice/d_user_reply

		请求参数：			
					reply_id 		回复id

		返回参数：
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				｝
	
	7. 官方通知
		请求方式:	GET
		请求url:	/notice/bref_offical

		请求参数:	 无

		返回参数 :	视图  setting/news/officialNews
				officals:[	
					{
					id
					title， 					通知的题目
					created_at， 			时间
					}...
				]

	8.官方通知——详情页
		请求方式:	GET
		请求url:	/notice/offical

		请求参数:	 
				offical_id					通知id

		返回参数 :	视图  setting/news/officialNewsDetails
				
				errCode:xxx,				错误码	0表示返回正常	 
				message:xxx					提示信息
				offical:{
					title,					题目
					created_at 				创建时间
					}
				offical_parts:[
					{
						type,				类型（text为文本，url为图片链接）
						content，   			内容
					}....
				]

	9.删除全部官方通知
		请求方式:	post
		请求url:	/notice/d_offical_all

		请求参数:	 

		返回参数 :	视图  setting/news/officialNewsDetails
				
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				｝

	10.删除官方通知
		请求方式:	post
		请求url:	/notice/d_offical

		请求参数:	 
				offical_id 			官方通知id

		返回参数 :	视图  setting/news/officialNewsDetails
				
				｛
					errCode:xxx,	错误码	0表示返回正常	 
					message:xxx		提示信息
				｝
